• Voor onderdeel 2 van de opdracht is een if statement toegoevoegd aan de code die wordt geactiveerd als de speler in aanraking komt met een raket (in enemies/Rocket.cs). Als de speler boven de raket zit wordt de bool 'beGone' waar. Dit is een nieuwe bool in de GameObject.cs klasse. Zolang beGone waar is voor een raket dan wordt hij niet gereset en blijft hij onzichtbaar. Bij het resetten van het level wordt de beGone waarde weer onwaar gemaakt. Als de speler in aanraking komt met de raket maar zich niet boven de raket bevindt dan Die() de speler nog steeds.

• Voor onderdeel 3 van de opdracht is in Player.cs een methode 'Shoot()' toegevoegd. Deze wordt door een wijziging van de HandleInput methode getriggerd door de spatiebalk. Er is ook een nieuwe float toegevoegd aan de player.cs klasse: newBombTimer. Als er een bom wordt afgevuurd dan wordt deze float gelijk aan 1 en daar wordt elk frame det tijd van afgetrokken. Zolang newBombTimer > 0, wordt de Shoot() methode niet aangeroepen en kan er dus geen nieuwe bom worden aangemaakt
De Shoot() methode maakt een object van de klasse PlayerBomb.cs aan. Dit object wordt toegevoegd aan een nieuwe GameObjectList in de Level.cs klasse, de playerBombs lijst. Hierdoor worden de update en draw methodes van de 'PlayerBomb's aangeroepen.
De nieuwe klasse PlayerBomb.cs bevat om te beginnen een constructor. Die laadt 2 sprites, "default" en "explode" (-gestolen- geleend van de Player), stelt de initële snelheid in en zet de float bombTime op 1.5. Deze laatste float wordt gebruikt als timer voordat de bom ontploft zonder nuttig resultaat voor de speler.
in de update methode van de PlayerBomb wordt eerst gekeken of 'exploding' waar is. Als dat het geval is dan is de bom al aan het exploderen en stopt de functie, anders worden de botsingsdetectie methodes aangeroepen en gekeken of de bom zich buiten het scherm bevindt. Tenslotte wordt nog gekeken of de bom zou moeten beginnen met exploderen omdat de bombTime kleiner of gelijk is aan 0. Als dat het geval is wordt de snelheid op 0 gezet, wordt de "explode" animatie opgeroepen om af te spelen en de 'exploding' bool wordt waar gemaakt. Als de bom dit frame niet begint met exploderen dan wordt de bombTime geupdate.
De HandleCollision() methode handelt de botsingsdetectie met de tegels van het level. De bommen hebben ongeveer de zelfde botslogica als de speler met een paar wijzigingen. De bommen houden geen rekening met de soort tegels. Als ze een tegel aanraken dan wordt hun snelheid helemaal gelijk aan nul, maar de bommen kunnen dan wel opnieuw vallen, en doen dat dan dus door die rij van tegels heen. Dit geeft een soort stuitereffect wat ervoor zorgt dat het niet te makkelijk wordt om vijanden uit te schakelen met de bommen.
De MeGone() Methode verwijdert de PlayerBomb simpelweg uit de lijst met PlayerBombs, waardoor de bomb niet meer gerendert wordt en daarmee verdwijnt.
De CheckEnemyCollision() methode laat de lijst op van alle vijanden in de wereld en gaat met een foreach loop per vijand af of de boundingbox van de vijand botst met die van de PlayerBomb. Als dat het geval is wordt de vijands BeGone bool waar; zijn zichtbaarheidswaarde onwaar; de PlayerBomb start met de explode animatie; de snelheid van de bom wordt gelijk aan nul gemaakt en de exploding bool wordt waar gemaakt.
Omdat de ontplofte bommen niet alleen maar onzichtbaar worden gemaakt, maar daadwerklijk verwijderd, moest de GameObjectList Update() methode worden aangepast. i.p.v. een foreach loop wordt nu een for loop gebruikt om alle kinderen hun update functie aan te roepen.